<?php

namespace DoctrineProxy\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setUserName($userName)
    {
        $this->__load();
        return parent::setUserName($userName);
    }

    public function getUserName()
    {
        $this->__load();
        return parent::getUserName();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setAdults($adults)
    {
        $this->__load();
        return parent::setAdults($adults);
    }

    public function getAdults()
    {
        $this->__load();
        return parent::getAdults();
    }

    public function setChildren($children)
    {
        $this->__load();
        return parent::setChildren($children);
    }

    public function getChildren()
    {
        $this->__load();
        return parent::getChildren();
    }

    public function setGoal($goal)
    {
        $this->__load();
        return parent::setGoal($goal);
    }

    public function getGoal()
    {
        $this->__load();
        return parent::getGoal();
    }

    public function setRegisteredDate($registeredDate)
    {
        $this->__load();
        return parent::setRegisteredDate($registeredDate);
    }

    public function getRegisteredDate()
    {
        $this->__load();
        return parent::getRegisteredDate();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setAccount($account)
    {
        $this->__load();
        return parent::setAccount($account);
    }

    public function getAccount()
    {
        $this->__load();
        return parent::getAccount();
    }

    public function setLastLoggedIn($lastLoggedIn)
    {
        $this->__load();
        return parent::setLastLoggedIn($lastLoggedIn);
    }

    public function getLastLoggedIn()
    {
        $this->__load();
        return parent::getLastLoggedIn();
    }

    public function setTimesLoggedIn($timesLoggedIn)
    {
        $this->__load();
        return parent::setTimesLoggedIn($timesLoggedIn);
    }

    public function getTimesLoggedIn()
    {
        $this->__load();
        return parent::getTimesLoggedIn();
    }

    public function setRank(\Entities\Rank $rank = NULL)
    {
        $this->__load();
        return parent::setRank($rank);
    }

    public function getRank()
    {
        $this->__load();
        return parent::getRank();
    }

    public function setCustomerToken($customerToken)
    {
        $this->__load();
        return parent::setCustomerToken($customerToken);
    }

    public function getCustomerToken()
    {
        $this->__load();
        return parent::getCustomerToken();
    }

    public function addUserActivitie(\Entities\UserActivity $userActivities)
    {
        $this->__load();
        return parent::addUserActivitie($userActivities);
    }

    public function removeUserActivitie(\Entities\UserActivity $userActivities)
    {
        $this->__load();
        return parent::removeUserActivitie($userActivities);
    }

    public function getUserActivities()
    {
        $this->__load();
        return parent::getUserActivities();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'userName', 'password', 'name', 'email', 'adults', 'children', 'goal', 'registeredDate', 'active', 'account', 'lastLoggedIn', 'timesLoggedIn', 'customerToken', 'rank', 'userActivities');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}